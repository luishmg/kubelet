#!/bin/bash

cat > ${INSTANCE}-csr.json <<EOF
{
  "CN": "system:node:${INSTANCE}",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "${COUNTRY}",
      "L": "${CITY}",
      "O": "system:nodes",
      "OU": "Kubernetes worker certificate",
      "ST": "${STATE}"
    }
  ]
}
EOF

/usr/local/bin/cfssl gencert \
  -ca=ca.pem \
  -ca-key=ca-key.pem \
  -config=ca-config.json \
  -hostname=${INSTANCE},${HOSTNAME},${INTERNAL_IP} \
  -profile=kubernetes \
  ${INSTANCE}-csr.json | /usr/local/bin/cfssljson -bare ${INSTANCE}

/usr/local/bin/cfssl gencert \
  -ca=ca.pem \
  -ca-key=ca-key.pem \
  -config=ca-config.json \
  -hostname=${INSTANCE},${HOSTNAME},${INTERNAL_IP} \
  -profile=kubernetes \
  ${INSTANCE}-csr.json | /usr/local/bin/cfssljson -bare ${INSTANCE}

/usr/local/bin/kubectl config set-cluster k8s-sysadmin \
  --certificate-authority=${CERT_DIR}ca.pem \
  --embed-certs=true \
  --server=https://${KUBEAPISERVER}:6443 \
  --kubeconfig=kubeconfig

/usr/local/bin/kubectl config set-credentials system:node:${INSTANCE} \
  --client-certificate=${INSTANCE}.pem \
  --client-key=${INSTANCE}-key.pem \
  --embed-certs=true \
  --kubeconfig=kubeconfig

/usr/local/bin/kubectl config set-context default \
  --cluster=k8s-sysadmin \
  --user=system:node:${INSTANCE} \
  --kubeconfig=kubeconfig

/usr/local/bin/kubectl config use-context default --kubeconfig=/var/lib/kubelet/kubeconfig
